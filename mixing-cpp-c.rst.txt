================================
How to mix C++ and C in projects
================================

:Home URL: https://github.com/pierre-rouleau/about_cpp
:Project:
:Created:  Thursday, July 18 2024.
:Author:  Pierre Rouleau <prouleau001@gmail.com>
:Modified: 2024-07-18 09:44:44, by Pierre Rouleau.
:Copyright: © 2024, Pierre Rouleau


.. contents::  **Table of Contents**
.. sectnum::

.. ---------------------------------------------------------------------------

Overview
========

:Ref: `C++ Language Linkage`_ @ `cppreference.com`_

The C++ programming language can interact with code written in C as long as
rules are followed.  These rules impose the proper use of the ``extern C``
declaration for all C code and C function declarations.  It allows the C++
compiler to generate C linkage for the C functions, as C linkage differs from
C++ linkage.

When looking at C and C++ code we have the following possibilities:

- C++ source code and header file.
- C source code and header file.
- C++ code where C++ functions call C functions.
- C++ code that implements C functions that can be called from other C
  functions implemented in other C files.

To allow interaction between C++ and C, the code should follow this guideline:

- Compile all C++ code with C++ compiler
- Compile all C code with  a C compiler
- All C headers declaring C functions and data types that are included by C++
  files and processed by the C++ compiler must enclose the C declarations
  inside an ``extern "C" { }`` block.
- A C++ function can call a C function that is declared ``extern "C"``.

  - The C function can be implemented inside a pure C file that was compiled
    by a **C** compiler.  If the C file was compiled by a C++ compiler the
    functions defined in the files will have C++ linkage, not C, as they
    should have.
  - If the C++ compiler compiles what looks like a C function, but the C
    function is not declared ``extern "C"`` then that function will be
    compiled as a C++ function, with C++ linkage, not C.

This leads to use the following format for the various files.

C header file
-------------

:File: `c_example.h`_
:Ref: uuidgen_ - `man7.org`_ Linux man page
:Ref: PEL_ `pel-uuid.el`_ UUID generation for Emacs `PEL C commands`_ and `PEL C++ commands`_.

The C header should have a layout similar to the following:

.. code:: c

          /* C HEADER: c_example.h
          **
          ** Purpose   : A C header declaring global scope C functions and variables.
          ** Created   : Thursday, July 18 2024.
          ** Author    : Pierre Rouleau <prouleau001@gmail.com>
          ** Time-stamp: <2024-07-18 11:07:18 EDT, updated by Pierre Rouleau>
          ** Copyright © 2024, Pierre Rouleau
          ** License   : MIT
          */
          /* -------------------------------------------------------------------------- */
          /* Description
          ** -----------
          **
          ** This is an example of a C header file that declares C functions and types.
          **
          ** It can be used inside a pure C program and can also be used in a program that
          ** mixes C and C++ as long as the C code is compiled by a C compiler and the C++
          ** code is compiled with a C++ compiler.
          **
          **
          ** The structure of the header file is important:
          **
          ** - It starts with an include guard that protects the use of header and allows
          **   only one code inclusion inside a C (or C++) compilation unit (a file).
          **
          **    In this case the include guard incorporates a GUI to eliminate the
          **    probability of clashes if another header with the same name is used
          **    elsewhere.  These UUID can be generated by the uuidgen utility or, if you
          **    are using Emacs, from code like the PEL system, automatically.
          **    If you do not use UUID, make sure your include guard names incorporate the
          **    file name with extra decoration text to increase its uniqueness.
          **    NEVER duplicate a UUID, these are generated to be unique.
          **
          ** - Optional header inclusion.
          **
          **    Header files should be self-sufficient. If they declare functions that use
          **    types declared inside other headers, those headers should be included here
          **    inside the include-guard protected area but outside the ``extern "C"``
          **    block.
          **
          ** - The ``extern "C"`` block beginning, enclosed in pre-processor statements; the
          **   C compiler will not see them but the C++ compiler will.
          **
          ** - The declarations of C data types, constants, global variables and functions.
          **
          **   - If you absolutely use global variables, the global variables should be
          **     declared inside the header file and they should be declared with the
          **     extern qualifier. Try to avoid global variables though.
          **
          **   - All C functions must be declared with their complete function prototypes.
          **
          ** - The end of the ``extern "C"`` block.
          **
          ** - The end of the include guard.
          */

          /* -------------------------------------------------------------------------- */
          #ifndef C_EXAMPLE__H_9D90C8CA_0E4C_4823_85DA_DB8144707007
          #define C_EXAMPLE__H_9D90C8CA_0E4C_4823_85DA_DB8144707007 /* include guard */
          /* -------------------------------------------------------------------------- */
          /* Header Inclusion
          ** ----------------
          */



          /* -------------------------------------------------------------------------- */
          #if defined(__cplusplus)
          extern "C" {
          #endif
          /* -------------------------------------------------------------------------- */
          /* Public Types
          ** ------------
          */



          /* -------------------------------------------------------------------------- */
          /* Public Constants
          ** ----------------
          */


          /* -------------------------------------------------------------------------- */
          /* Public Global Variables
          ** -----------------------
          **
          ** Please avoid using global variables!  If you have to use them declare them
          ** here with the extern specifier.
          */



          /* -------------------------------------------------------------------------- */
          /* Public Functions
          ** ----------------
          */




          /* -------------------------------------------------------------------------- */
          #if defined(__cplusplus)
          }
          #endif
          /* -------------------------------------------------------------------------- */
          #endif


C Implementation file
---------------------

:File: `c_example.c`_


The implementation of the functions and variables declared in the above C
header should be located inside a C file whose name share the same body but
uses the ``.c`` extension.

.. code:: c

          /* C IMPLEMENTATION FILE: c_example.c
          **
          ** Purpose   : A C file defining C functions and data structures.
          ** Created   : Thursday, July 18 2024.
          ** Author    : Pierre Rouleau <prouleau001@gmail.com>
          ** Time-stamp: <2024-07-18 11:10:24 EDT, updated by Pierre Rouleau>
          ** Copyright © 2024, Pierre Rouleau
          ** License   : MIT
          */
          /* -------------------------------------------------------------------------- */
          /* Module Description
          ** ------------------
          **
          ** The C implementation file defines the C functions and potentially also places
          ** the definition of global or file local scope data variables.  The file should
          ** have the following organization.
          **
          ** 1- Header file inclusions.
          **
          **    - First, include the "*interface definition*" header that declares every
          **      public (global scope) function implemented by this C implementation
          **      file.  Any global variable should be declared as ``extern`` inside the
          **      header file (although the use of such global scope variables is strongly
          **      discouraged, only use them on specific purpose and only when you
          **      understand the consequences).
          **
          **    - Include the other headers after:
          **
          **      - Start with the most specific headers, such as project related headers.
          **      - Place all system headers, which are more general, at the end.
          **
          **    This rule enforces the philosophy of ensuring that each header is
          **    self-sufficient and includes what it must to incorporate every necessary
          **    declaration.
          **
          **    The rule provides the correct environment to create unit test code or test
          **    programs that will only need to include the headers declaring the
          **    functions and data structures they use *directly*.
          **
          ** 2- Define any local types: C data types that are only used inside this C
          **    implementation file.
          **
          ** 3- Declare all local C functions.  Write their C function prototype of all
          **    local static functions.  These functions are only accessible to other
          **    functions inside this file and will not be available from outside.
          **
          **      Putting their declaration first helps documenting code and allows
          **      ordering the functions such that the parent function is placed before
          **      the functions it calls.
          **
          ** 4- Define local variables.Variables that have static linkage and have file
          **    local scope.  They will be visible to all C functions implemented in this
          **    file.
          **
          ** 5- The set of C functions definition is placed last.
          */



          /* -------------------------------------------------------------------------- */
          /* Header Inclusion
          ** ----------------
          */

          #include "c_example.h"

          /* -------------------------------------------------------------------------- */
          /* Local Types
          ** -----------
          */


          /* -------------------------------------------------------------------------- */
          /* Local Function Declaration
          ** --------------------------
          */

          /* -------------------------------------------------------------------------- */
          /* Local Variables
          ** ---------------
          */



          /* -------------------------------------------------------------------------- */
          /* Code
          ** ----
          */



          /* -------------------------------------------------------------------------- */


.. ---------------------------------------------------------------------------
.. links


.. _c_example.c: c_example.c
.. _c_example.h: c_example.h
.. _C++ Language Linkage: https://en.cppreference.com/w/cpp/language/language_linkage
.. _cppreference.com:     https://en.cppreference.com/w/
.. _uuidgen:              https://man7.org/linux/man-pages/man1/uuidgen.1.html
.. _man7.org:             https://man7.org/index.html
.. _PEL:                  https://github.com/pierre-rouleau/pel#readme
.. _pel-uuid.el:          https://github.com/pierre-rouleau/pel/blob/master/pel-uuid.el
.. _PEL C commands:       https://raw.githubusercontent.com/pierre-rouleau/pel/master/doc/pdf/pl-c.pdf#page=7
.. _PEL C++ commands:     https://raw.githubusercontent.com/pierre-rouleau/pel/master/doc/pdf/pl-c++.pdf#page=7

.. ---------------------------------------------------------------------------

..
       Local Variables:
       time-stamp-line-limit: 10
       time-stamp-start: "^:Modified:[ \t]+\\\\?"
       time-stamp-end:   "\\.$"
       End:
