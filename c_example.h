/* C HEADER: c_example.h
**
** Purpose   : A C header declaring global scope C functions and variables.
** Created   : Thursday, July 18 2024.
** Author    : Pierre Rouleau <prouleau001@gmail.com>
** Time-stamp: <2024-07-18 11:08:26 EDT, updated by Pierre Rouleau>
** Copyright Â© 2024, Pierre Rouleau
** License   : MIT
*/
/* -------------------------------------------------------------------------- */
/* Description
** -----------
**
** This is an example of a C header file that declares C functions and types.
**
** It can be used inside a pure C program and can also be used in a program that
** mixes C and C++ as long as the C code is compiled by a C compiler and the C++
** code is compiled with a C++ compiler.
**
**
** The structure of the header file is important:
**
** - It starts with an include guard that protects the use of header and allows
**   only one code inclusion inside a C (or C++) compilation unit (a file).
**
**    In this case the include guard incorporates a GUI to eliminate the
**    probability of clashes if another header with the same name is used
**    elsewhere.  These UUID can be generated by the uuidgen utility or, if you
**    are using Emacs, from code like the PEL system, automatically.
**    If you do not use UUID, make sure your include guard names incorporate the
**    file name with extra decoration text to increase its uniqueness.
**    NEVER duplicate a UUID, these are generated to be unique.
**
** - Optional header inclusion.
**
**    Header files should be self-sufficient. If they declare functions that use
**    types declared inside other headers, those headers should be included here
**    inside the include-guard protected area but outside the ``extern "C"``
**    block.
**
** - The ``extern "C"`` block beginning, enclosed in pre-processor statements; the
**   C compiler will not see them but the C++ compiler will.
**
** - The declarations of C data types, constants, global variables and functions.
**
**   - If you absolutely use global variables, the global variables should be
**     declared inside the header file and they should be declared with the
**     extern qualifier. Try to avoid global variables though.
**
**   - All C functions must be declared with their complete function prototypes.
**
** - The end of the ``extern "C"`` block.
**
** - The end of the include guard.
*/

/* -------------------------------------------------------------------------- */
#ifndef C_EXAMPLE__H_9D90C8CA_0E4C_4823_85DA_DB8144707007
#define C_EXAMPLE__H_9D90C8CA_0E4C_4823_85DA_DB8144707007 /* include guard */
/* -------------------------------------------------------------------------- */
/* Header Inclusion
** ----------------
*/



/* -------------------------------------------------------------------------- */
#if defined(__cplusplus)
extern "C" {
#endif
/* -------------------------------------------------------------------------- */
/* Public Types
** ------------
*/



/* -------------------------------------------------------------------------- */
/* Public Constants
** ----------------
*/


/* -------------------------------------------------------------------------- */
/* Public Global Variables
** -----------------------
**
** Please avoid using global variables!  If you have to use them declare them
** here with the extern specifier.
*/



/* -------------------------------------------------------------------------- */
/* Public Functions
** ----------------
*/




/* -------------------------------------------------------------------------- */
#if defined(__cplusplus)
}
#endif
/* -------------------------------------------------------------------------- */
#endif
